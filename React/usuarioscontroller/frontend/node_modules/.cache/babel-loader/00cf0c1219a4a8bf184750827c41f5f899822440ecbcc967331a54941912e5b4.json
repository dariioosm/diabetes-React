{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\React\\\\usuarioscontroller\\\\src\\\\components\\\\estadisticas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables, CategoryScale, LinearScale } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables, CategoryScale, LinearScale);\nconst Estadisticas = ({\n  mes,\n  anio\n}) => {\n  _s();\n  const [estad, setEstad] = useState(null);\n  const [carga, setCarga] = useState(true);\n  const [error, setError] = useState(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchEstadistica = async () => {\n      setCarga(true);\n      try {\n        const respuesta = await axios.get(`http://localhost/usuariocontroller/src/api/lenta.php?mes=${mes}&anio=${anio}`);\n        setEstad(respuesta.datos);\n      } catch (error) {\n        console.error('Error al coger las estadisticas', error);\n        setError('No se cargan las estadisticas');\n      } finally {\n        setCarga(false);\n      }\n    };\n    fetchEstadistica();\n  }, [mes, anio]);\n  useEffect(() => {\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, []);\n  if (carga) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Las estadisticas se estan cargando\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 22\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 22\n  }, this);\n  if (!estad) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No se han encontrado datos\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 23\n  }, this);\n  if (!Array.isArray(estad.valores) || estad.valores.length == 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El grafico no tiene datos para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  const datostabla = {\n    labels: estad.values.map((_, index) => index + 1),\n    datasets: [{\n      label: 'Valor glucosa lenta',\n      data: estad.values,\n      fill: false,\n      borderColor: 'rgba(255, 150, 150, 1)',\n      tension: 0.3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Estadisticas de Glucosa Lenta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Valor minimo \", estad.min !== null ? estad.min : 'No disponible']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Valor promedio \", estad.media !== null ? estad.media : 'No disponible']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Valor maximo \", estad.max !== null ? estad.max : 'No disponible', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      datos: datostabla,\n      ref: chartRef,\n      id: \"myChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(Estadisticas, \"I+UDnhsreNj3RO2qBk1b69Hh7ro=\");\n_c = Estadisticas;\nexport default Estadisticas;\nvar _c;\n$RefreshReg$(_c, \"Estadisticas\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","Line","Chart","registerables","CategoryScale","LinearScale","jsxDEV","_jsxDEV","register","Estadisticas","mes","anio","_s","estad","setEstad","carga","setCarga","error","setError","chartRef","fetchEstadistica","respuesta","get","datos","console","current","destroy","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","valores","length","datostabla","labels","values","map","_","index","datasets","label","data","fill","borderColor","tension","min","media","max","ref","id","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/React/usuarioscontroller/src/components/estadisticas.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, registerables, CategoryScale, LinearScale } from 'chart.js';\r\n\r\nChart.register(...registerables, CategoryScale, LinearScale);\r\n\r\nconst Estadisticas = ({mes, anio})=>{\r\n    const [estad,setEstad]=useState(null);\r\n    const [carga,setCarga]=useState(true);\r\n    const [error, setError] = useState(null);\r\n    const chartRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n        const fetchEstadistica = async ()=>{\r\n            setCarga(true)\r\n            try{\r\n                const respuesta = await axios.get(`http://localhost/usuariocontroller/src/api/lenta.php?mes=${mes}&anio=${anio}`);\r\n                setEstad(respuesta.datos);\r\n            }catch(error){\r\n                console.error('Error al coger las estadisticas',error)\r\n                setError('No se cargan las estadisticas')\r\n            }finally{\r\n                setCarga(false)\r\n            }\r\n        }\r\n\r\n        fetchEstadistica()\r\n\r\n    },[mes,anio])\r\n\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            if(chartRef.current){\r\n                chartRef.current.destroy()\r\n            }\r\n        }\r\n    },[])\r\n\r\n    if(carga) return <p>Las estadisticas se estan cargando</p>\r\n    if(error) return <p>{error}</p>\r\n    if(!estad) return <p>No se han encontrado datos</p>\r\n\r\n    if(!Array.isArray(estad.valores)||estad.valores.length==0){\r\n        return <p>El grafico no tiene datos para mostrar</p>\r\n    }\r\n\r\n    const datostabla ={\r\n        labels: estad.values.map((_,index)=>index+1),\r\n        datasets:[\r\n            {\r\n                label: 'Valor glucosa lenta',\r\n                data: estad.values,\r\n                fill: false,\r\n                borderColor: 'rgba(255, 150, 150, 1)',\r\n                tension: 0.3\r\n\r\n            }\r\n\r\n        ]\r\n    }\r\n    return(\r\n        <div>\r\n            <h3>Estadisticas de Glucosa Lenta</h3>\r\n            <p>Valor minimo {estad.min !==null ? estad.min : 'No disponible'}</p>\r\n            <p>Valor promedio {estad.media!==null ? estad.media: 'No disponible'}</p>\r\n            <p>Valor maximo {estad.max!==null ? estad.max : 'No disponible'} </p>\r\n            <Line datos={datostabla} ref={chartRef} id=\"myChart\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Estadisticas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}